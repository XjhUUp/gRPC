// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo.proto
// Original file comments:
// image transmission server
#ifndef GRPC_demo_2eproto__INCLUDED
#define GRPC_demo_2eproto__INCLUDED

#include "demo.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ImgTransmit {

// service definition.
class ImgDemo final {
 public:
  static constexpr char const* service_full_name() {
    return "ImgTransmit.ImgDemo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // simple RPC
    virtual ::grpc::Status resDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::ImgTransmit::Description* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImgTransmit::Description>> AsyncresDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImgTransmit::Description>>(AsyncresDescFetchedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImgTransmit::Description>> PrepareAsyncresDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ImgTransmit::Description>>(PrepareAsyncresDescFetchedRaw(context, request, cq));
    }
    // A client-to-server streaming RPC. 
    // stream type means a group of ImgInfo will be sent orderly from client
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>> ImgUpload(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>>(ImgUploadRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>> AsyncImgUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>>(AsyncImgUploadRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>> PrepareAsyncImgUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>>(PrepareAsyncImgUploadRaw(context, cq));
    }
    // A server-to-client streaming RPC. send result img to client
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ImgTransmit::ImgInfo>> resImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ImgTransmit::ImgInfo>>(resImgFetchedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImgTransmit::ImgInfo>> AsyncresImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImgTransmit::ImgInfo>>(AsyncresImgFetchedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImgTransmit::ImgInfo>> PrepareAsyncresImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ImgTransmit::ImgInfo>>(PrepareAsyncresImgFetchedRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // simple RPC
      virtual void resDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName* request, ::ImgTransmit::Description* response, std::function<void(::grpc::Status)>) = 0;
      virtual void resDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName* request, ::ImgTransmit::Description* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // A client-to-server streaming RPC. 
      // stream type means a group of ImgInfo will be sent orderly from client
      virtual void ImgUpload(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ImgTransmit::ImgInfo,::ImgTransmit::ImgInfo>* reactor) = 0;
      // A server-to-client streaming RPC. send result img to client
      virtual void resImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName* request, ::grpc::ClientReadReactor< ::ImgTransmit::ImgInfo>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ImgTransmit::Description>* AsyncresDescFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ImgTransmit::Description>* PrepareAsyncresDescFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* ImgUploadRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* AsyncImgUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* PrepareAsyncImgUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ImgTransmit::ImgInfo>* resImgFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ImgTransmit::ImgInfo>* AsyncresImgFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ImgTransmit::ImgInfo>* PrepareAsyncresImgFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status resDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::ImgTransmit::Description* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImgTransmit::Description>> AsyncresDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImgTransmit::Description>>(AsyncresDescFetchedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImgTransmit::Description>> PrepareAsyncresDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ImgTransmit::Description>>(PrepareAsyncresDescFetchedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>> ImgUpload(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>>(ImgUploadRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>> AsyncImgUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>>(AsyncImgUploadRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>> PrepareAsyncImgUpload(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>>(PrepareAsyncImgUploadRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ImgTransmit::ImgInfo>> resImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ImgTransmit::ImgInfo>>(resImgFetchedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ImgTransmit::ImgInfo>> AsyncresImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ImgTransmit::ImgInfo>>(AsyncresImgFetchedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ImgTransmit::ImgInfo>> PrepareAsyncresImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ImgTransmit::ImgInfo>>(PrepareAsyncresImgFetchedRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void resDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName* request, ::ImgTransmit::Description* response, std::function<void(::grpc::Status)>) override;
      void resDescFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName* request, ::ImgTransmit::Description* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ImgUpload(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ImgTransmit::ImgInfo,::ImgTransmit::ImgInfo>* reactor) override;
      void resImgFetched(::grpc::ClientContext* context, const ::ImgTransmit::BaseName* request, ::grpc::ClientReadReactor< ::ImgTransmit::ImgInfo>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ImgTransmit::Description>* AsyncresDescFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ImgTransmit::Description>* PrepareAsyncresDescFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* ImgUploadRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* AsyncImgUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* PrepareAsyncImgUploadRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ImgTransmit::ImgInfo>* resImgFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request) override;
    ::grpc::ClientAsyncReader< ::ImgTransmit::ImgInfo>* AsyncresImgFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ImgTransmit::ImgInfo>* PrepareAsyncresImgFetchedRaw(::grpc::ClientContext* context, const ::ImgTransmit::BaseName& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_resDescFetched_;
    const ::grpc::internal::RpcMethod rpcmethod_ImgUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_resImgFetched_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // simple RPC
    virtual ::grpc::Status resDescFetched(::grpc::ServerContext* context, const ::ImgTransmit::BaseName* request, ::ImgTransmit::Description* response);
    // A client-to-server streaming RPC. 
    // stream type means a group of ImgInfo will be sent orderly from client
    virtual ::grpc::Status ImgUpload(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* stream);
    // A server-to-client streaming RPC. send result img to client
    virtual ::grpc::Status resImgFetched(::grpc::ServerContext* context, const ::ImgTransmit::BaseName* request, ::grpc::ServerWriter< ::ImgTransmit::ImgInfo>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_resDescFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_resDescFetched() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_resDescFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resDescFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::ImgTransmit::Description* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestresDescFetched(::grpc::ServerContext* context, ::ImgTransmit::BaseName* request, ::grpc::ServerAsyncResponseWriter< ::ImgTransmit::Description>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ImgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ImgUpload() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ImgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImgUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImgUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_resImgFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_resImgFetched() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_resImgFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resImgFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::grpc::ServerWriter< ::ImgTransmit::ImgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestresImgFetched(::grpc::ServerContext* context, ::ImgTransmit::BaseName* request, ::grpc::ServerAsyncWriter< ::ImgTransmit::ImgInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_resDescFetched<WithAsyncMethod_ImgUpload<WithAsyncMethod_resImgFetched<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_resDescFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_resDescFetched() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ImgTransmit::BaseName, ::ImgTransmit::Description>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ImgTransmit::BaseName* request, ::ImgTransmit::Description* response) { return this->resDescFetched(context, request, response); }));}
    void SetMessageAllocatorFor_resDescFetched(
        ::grpc::MessageAllocator< ::ImgTransmit::BaseName, ::ImgTransmit::Description>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ImgTransmit::BaseName, ::ImgTransmit::Description>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_resDescFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resDescFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::ImgTransmit::Description* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resDescFetched(
      ::grpc::CallbackServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::ImgTransmit::Description* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ImgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ImgUpload() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ImgUpload(context); }));
    }
    ~WithCallbackMethod_ImgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImgUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* ImgUpload(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_resImgFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_resImgFetched() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ImgTransmit::BaseName, ::ImgTransmit::ImgInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ImgTransmit::BaseName* request) { return this->resImgFetched(context, request); }));
    }
    ~WithCallbackMethod_resImgFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resImgFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::grpc::ServerWriter< ::ImgTransmit::ImgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ImgTransmit::ImgInfo>* resImgFetched(
      ::grpc::CallbackServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_resDescFetched<WithCallbackMethod_ImgUpload<WithCallbackMethod_resImgFetched<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_resDescFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_resDescFetched() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_resDescFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resDescFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::ImgTransmit::Description* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ImgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ImgUpload() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ImgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImgUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_resImgFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_resImgFetched() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_resImgFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resImgFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::grpc::ServerWriter< ::ImgTransmit::ImgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_resDescFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_resDescFetched() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_resDescFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resDescFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::ImgTransmit::Description* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestresDescFetched(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ImgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ImgUpload() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ImgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImgUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImgUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_resImgFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_resImgFetched() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_resImgFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resImgFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::grpc::ServerWriter< ::ImgTransmit::ImgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestresImgFetched(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_resDescFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_resDescFetched() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->resDescFetched(context, request, response); }));
    }
    ~WithRawCallbackMethod_resDescFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resDescFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::ImgTransmit::Description* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resDescFetched(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ImgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ImgUpload() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ImgUpload(context); }));
    }
    ~WithRawCallbackMethod_ImgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImgUpload(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ImgTransmit::ImgInfo, ::ImgTransmit::ImgInfo>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ImgUpload(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_resImgFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_resImgFetched() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->resImgFetched(context, request); }));
    }
    ~WithRawCallbackMethod_resImgFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resImgFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::grpc::ServerWriter< ::ImgTransmit::ImgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* resImgFetched(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_resDescFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_resDescFetched() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ImgTransmit::BaseName, ::ImgTransmit::Description>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ImgTransmit::BaseName, ::ImgTransmit::Description>* streamer) {
                       return this->StreamedresDescFetched(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_resDescFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status resDescFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::ImgTransmit::Description* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedresDescFetched(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ImgTransmit::BaseName,::ImgTransmit::Description>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_resDescFetched<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_resImgFetched : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_resImgFetched() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ImgTransmit::BaseName, ::ImgTransmit::ImgInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ImgTransmit::BaseName, ::ImgTransmit::ImgInfo>* streamer) {
                       return this->StreamedresImgFetched(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_resImgFetched() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status resImgFetched(::grpc::ServerContext* /*context*/, const ::ImgTransmit::BaseName* /*request*/, ::grpc::ServerWriter< ::ImgTransmit::ImgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedresImgFetched(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ImgTransmit::BaseName,::ImgTransmit::ImgInfo>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_resImgFetched<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_resDescFetched<WithSplitStreamingMethod_resImgFetched<Service > > StreamedService;
};

}  // namespace ImgTransmit


#endif  // GRPC_demo_2eproto__INCLUDED
