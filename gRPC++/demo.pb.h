// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2eproto;
namespace ImgTransmit {
class BaseName;
struct BaseNameDefaultTypeInternal;
extern BaseNameDefaultTypeInternal _BaseName_default_instance_;
class Description;
struct DescriptionDefaultTypeInternal;
extern DescriptionDefaultTypeInternal _Description_default_instance_;
class ImgInfo;
struct ImgInfoDefaultTypeInternal;
extern ImgInfoDefaultTypeInternal _ImgInfo_default_instance_;
class ImgInfo_Img;
struct ImgInfo_ImgDefaultTypeInternal;
extern ImgInfo_ImgDefaultTypeInternal _ImgInfo_Img_default_instance_;
class ImgInfo_MapsEntry_DoNotUse;
struct ImgInfo_MapsEntry_DoNotUseDefaultTypeInternal;
extern ImgInfo_MapsEntry_DoNotUseDefaultTypeInternal _ImgInfo_MapsEntry_DoNotUse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace ImgTransmit
PROTOBUF_NAMESPACE_OPEN
template<> ::ImgTransmit::BaseName* Arena::CreateMaybeMessage<::ImgTransmit::BaseName>(Arena*);
template<> ::ImgTransmit::Description* Arena::CreateMaybeMessage<::ImgTransmit::Description>(Arena*);
template<> ::ImgTransmit::ImgInfo* Arena::CreateMaybeMessage<::ImgTransmit::ImgInfo>(Arena*);
template<> ::ImgTransmit::ImgInfo_Img* Arena::CreateMaybeMessage<::ImgTransmit::ImgInfo_Img>(Arena*);
template<> ::ImgTransmit::ImgInfo_MapsEntry_DoNotUse* Arena::CreateMaybeMessage<::ImgTransmit::ImgInfo_MapsEntry_DoNotUse>(Arena*);
template<> ::ImgTransmit::Status* Arena::CreateMaybeMessage<::ImgTransmit::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ImgTransmit {

enum ImgInfo_ImgType : int {
  ImgInfo_ImgType_JPG = 0,
  ImgInfo_ImgType_PNG = 1,
  ImgInfo_ImgType_ImgInfo_ImgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImgInfo_ImgType_ImgInfo_ImgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImgInfo_ImgType_IsValid(int value);
constexpr ImgInfo_ImgType ImgInfo_ImgType_ImgType_MIN = ImgInfo_ImgType_JPG;
constexpr ImgInfo_ImgType ImgInfo_ImgType_ImgType_MAX = ImgInfo_ImgType_PNG;
constexpr int ImgInfo_ImgType_ImgType_ARRAYSIZE = ImgInfo_ImgType_ImgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImgInfo_ImgType_descriptor();
template<typename T>
inline const std::string& ImgInfo_ImgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImgInfo_ImgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImgInfo_ImgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImgInfo_ImgType_descriptor(), enum_t_value);
}
inline bool ImgInfo_ImgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImgInfo_ImgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImgInfo_ImgType>(
    ImgInfo_ImgType_descriptor(), name, value);
}
// ===================================================================

class ImgInfo_Img final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImgTransmit.ImgInfo.Img) */ {
 public:
  inline ImgInfo_Img() : ImgInfo_Img(nullptr) {}
  ~ImgInfo_Img() override;
  explicit constexpr ImgInfo_Img(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgInfo_Img(const ImgInfo_Img& from);
  ImgInfo_Img(ImgInfo_Img&& from) noexcept
    : ImgInfo_Img() {
    *this = ::std::move(from);
  }

  inline ImgInfo_Img& operator=(const ImgInfo_Img& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgInfo_Img& operator=(ImgInfo_Img&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgInfo_Img& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgInfo_Img* internal_default_instance() {
    return reinterpret_cast<const ImgInfo_Img*>(
               &_ImgInfo_Img_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImgInfo_Img& a, ImgInfo_Img& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgInfo_Img* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgInfo_Img* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImgInfo_Img* New() const final {
    return new ImgInfo_Img();
  }

  ImgInfo_Img* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImgInfo_Img>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgInfo_Img& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgInfo_Img& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgInfo_Img* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImgTransmit.ImgInfo.Img";
  }
  protected:
  explicit ImgInfo_Img(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTypeFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kChannelFieldNumber = 5,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .ImgTransmit.ImgInfo.ImgType type = 2;
  void clear_type();
  ::ImgTransmit::ImgInfo_ImgType type() const;
  void set_type(::ImgTransmit::ImgInfo_ImgType value);
  private:
  ::ImgTransmit::ImgInfo_ImgType _internal_type() const;
  void _internal_set_type(::ImgTransmit::ImgInfo_ImgType value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 4;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ImgTransmit.ImgInfo.Img)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ImgInfo_MapsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImgInfo_MapsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ImgInfo_MapsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ImgInfo_MapsEntry_DoNotUse();
  explicit constexpr ImgInfo_MapsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ImgInfo_MapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ImgInfo_MapsEntry_DoNotUse& other);
  static const ImgInfo_MapsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImgInfo_MapsEntry_DoNotUse*>(&_ImgInfo_MapsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ImgInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImgTransmit.ImgInfo) */ {
 public:
  inline ImgInfo() : ImgInfo(nullptr) {}
  ~ImgInfo() override;
  explicit constexpr ImgInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgInfo(const ImgInfo& from);
  ImgInfo(ImgInfo&& from) noexcept
    : ImgInfo() {
    *this = ::std::move(from);
  }

  inline ImgInfo& operator=(const ImgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgInfo& operator=(ImgInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgInfo* internal_default_instance() {
    return reinterpret_cast<const ImgInfo*>(
               &_ImgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImgInfo& a, ImgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImgInfo* New() const final {
    return new ImgInfo();
  }

  ImgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImgInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImgTransmit.ImgInfo";
  }
  protected:
  explicit ImgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImgInfo_Img Img;

  typedef ImgInfo_ImgType ImgType;
  static constexpr ImgType JPG =
    ImgInfo_ImgType_JPG;
  static constexpr ImgType PNG =
    ImgInfo_ImgType_PNG;
  static inline bool ImgType_IsValid(int value) {
    return ImgInfo_ImgType_IsValid(value);
  }
  static constexpr ImgType ImgType_MIN =
    ImgInfo_ImgType_ImgType_MIN;
  static constexpr ImgType ImgType_MAX =
    ImgInfo_ImgType_ImgType_MAX;
  static constexpr int ImgType_ARRAYSIZE =
    ImgInfo_ImgType_ImgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ImgType_descriptor() {
    return ImgInfo_ImgType_descriptor();
  }
  template<typename T>
  static inline const std::string& ImgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImgType_Name.");
    return ImgInfo_ImgType_Name(enum_t_value);
  }
  static inline bool ImgType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ImgType* value) {
    return ImgInfo_ImgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<int32, .ImgTransmit.ImgInfo.Img> maps = 2;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >&
      _internal_maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >*
      _internal_mutable_maps();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >&
      maps() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >*
      mutable_maps();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ImgTransmit.ImgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ImgInfo_MapsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> maps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImgTransmit.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return new Status();
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImgTransmit.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ImgTransmit.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class BaseName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImgTransmit.BaseName) */ {
 public:
  inline BaseName() : BaseName(nullptr) {}
  ~BaseName() override;
  explicit constexpr BaseName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseName(const BaseName& from);
  BaseName(BaseName&& from) noexcept
    : BaseName() {
    *this = ::std::move(from);
  }

  inline BaseName& operator=(const BaseName& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseName& operator=(BaseName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseName& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseName* internal_default_instance() {
    return reinterpret_cast<const BaseName*>(
               &_BaseName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BaseName& a, BaseName& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseName* New() const final {
    return new BaseName();
  }

  BaseName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaseName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImgTransmit.BaseName";
  }
  protected:
  explicit BaseName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:ImgTransmit.BaseName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Description final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImgTransmit.Description) */ {
 public:
  inline Description() : Description(nullptr) {}
  ~Description() override;
  explicit constexpr Description(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Description(const Description& from);
  Description(Description&& from) noexcept
    : Description() {
    *this = ::std::move(from);
  }

  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }
  inline Description& operator=(Description&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Description& default_instance() {
    return *internal_default_instance();
  }
  static inline const Description* internal_default_instance() {
    return reinterpret_cast<const Description*>(
               &_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Description& a, Description& b) {
    a.Swap(&b);
  }
  inline void Swap(Description* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Description* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Description* New() const final {
    return new Description();
  }

  Description* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Description>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Description& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Description& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Description* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImgTransmit.Description";
  }
  protected:
  explicit Description(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 1,
  };
  // repeated string desc = 1;
  int desc_size() const;
  private:
  int _internal_desc_size() const;
  public:
  void clear_desc();
  const std::string& desc(int index) const;
  std::string* mutable_desc(int index);
  void set_desc(int index, const std::string& value);
  void set_desc(int index, std::string&& value);
  void set_desc(int index, const char* value);
  void set_desc(int index, const char* value, size_t size);
  std::string* add_desc();
  void add_desc(const std::string& value);
  void add_desc(std::string&& value);
  void add_desc(const char* value);
  void add_desc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& desc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_desc();
  private:
  const std::string& _internal_desc(int index) const;
  std::string* _internal_add_desc();
  public:

  // @@protoc_insertion_point(class_scope:ImgTransmit.Description)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImgInfo_Img

// bytes data = 1;
inline void ImgInfo_Img::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ImgInfo_Img::data() const {
  // @@protoc_insertion_point(field_get:ImgTransmit.ImgInfo.Img.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImgInfo_Img::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImgTransmit.ImgInfo.Img.data)
}
inline std::string* ImgInfo_Img::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ImgTransmit.ImgInfo.Img.data)
  return _s;
}
inline const std::string& ImgInfo_Img::_internal_data() const {
  return data_.Get();
}
inline void ImgInfo_Img::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImgInfo_Img::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImgInfo_Img::release_data() {
  // @@protoc_insertion_point(field_release:ImgTransmit.ImgInfo.Img.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImgInfo_Img::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImgTransmit.ImgInfo.Img.data)
}

// .ImgTransmit.ImgInfo.ImgType type = 2;
inline void ImgInfo_Img::clear_type() {
  type_ = 0;
}
inline ::ImgTransmit::ImgInfo_ImgType ImgInfo_Img::_internal_type() const {
  return static_cast< ::ImgTransmit::ImgInfo_ImgType >(type_);
}
inline ::ImgTransmit::ImgInfo_ImgType ImgInfo_Img::type() const {
  // @@protoc_insertion_point(field_get:ImgTransmit.ImgInfo.Img.type)
  return _internal_type();
}
inline void ImgInfo_Img::_internal_set_type(::ImgTransmit::ImgInfo_ImgType value) {
  
  type_ = value;
}
inline void ImgInfo_Img::set_type(::ImgTransmit::ImgInfo_ImgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ImgTransmit.ImgInfo.Img.type)
}

// int32 height = 3;
inline void ImgInfo_Img::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgInfo_Img::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgInfo_Img::height() const {
  // @@protoc_insertion_point(field_get:ImgTransmit.ImgInfo.Img.height)
  return _internal_height();
}
inline void ImgInfo_Img::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ImgInfo_Img::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ImgTransmit.ImgInfo.Img.height)
}

// int32 width = 4;
inline void ImgInfo_Img::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgInfo_Img::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgInfo_Img::width() const {
  // @@protoc_insertion_point(field_get:ImgTransmit.ImgInfo.Img.width)
  return _internal_width();
}
inline void ImgInfo_Img::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImgInfo_Img::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ImgTransmit.ImgInfo.Img.width)
}

// int32 channel = 5;
inline void ImgInfo_Img::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgInfo_Img::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImgInfo_Img::channel() const {
  // @@protoc_insertion_point(field_get:ImgTransmit.ImgInfo.Img.channel)
  return _internal_channel();
}
inline void ImgInfo_Img::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void ImgInfo_Img::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:ImgTransmit.ImgInfo.Img.channel)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ImgInfo

// string name = 1;
inline void ImgInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ImgInfo::name() const {
  // @@protoc_insertion_point(field_get:ImgTransmit.ImgInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImgInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImgTransmit.ImgInfo.name)
}
inline std::string* ImgInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ImgTransmit.ImgInfo.name)
  return _s;
}
inline const std::string& ImgInfo::_internal_name() const {
  return name_.Get();
}
inline void ImgInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImgInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImgInfo::release_name() {
  // @@protoc_insertion_point(field_release:ImgTransmit.ImgInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImgInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ImgTransmit.ImgInfo.name)
}

// map<int32, .ImgTransmit.ImgInfo.Img> maps = 2;
inline int ImgInfo::_internal_maps_size() const {
  return maps_.size();
}
inline int ImgInfo::maps_size() const {
  return _internal_maps_size();
}
inline void ImgInfo::clear_maps() {
  maps_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >&
ImgInfo::_internal_maps() const {
  return maps_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >&
ImgInfo::maps() const {
  // @@protoc_insertion_point(field_map:ImgTransmit.ImgInfo.maps)
  return _internal_maps();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >*
ImgInfo::_internal_mutable_maps() {
  return maps_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::ImgTransmit::ImgInfo_Img >*
ImgInfo::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_map:ImgTransmit.ImgInfo.maps)
  return _internal_mutable_maps();
}

// -------------------------------------------------------------------

// Status

// int32 code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:ImgTransmit.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:ImgTransmit.Status.code)
}

// -------------------------------------------------------------------

// BaseName

// repeated string name = 1;
inline int BaseName::_internal_name_size() const {
  return name_.size();
}
inline int BaseName::name_size() const {
  return _internal_name_size();
}
inline void BaseName::clear_name() {
  name_.Clear();
}
inline std::string* BaseName::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:ImgTransmit.BaseName.name)
  return _s;
}
inline const std::string& BaseName::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& BaseName::name(int index) const {
  // @@protoc_insertion_point(field_get:ImgTransmit.BaseName.name)
  return _internal_name(index);
}
inline std::string* BaseName::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:ImgTransmit.BaseName.name)
  return name_.Mutable(index);
}
inline void BaseName::set_name(int index, const std::string& value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ImgTransmit.BaseName.name)
}
inline void BaseName::set_name(int index, std::string&& value) {
  name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ImgTransmit.BaseName.name)
}
inline void BaseName::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ImgTransmit.BaseName.name)
}
inline void BaseName::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ImgTransmit.BaseName.name)
}
inline std::string* BaseName::_internal_add_name() {
  return name_.Add();
}
inline void BaseName::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ImgTransmit.BaseName.name)
}
inline void BaseName::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ImgTransmit.BaseName.name)
}
inline void BaseName::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ImgTransmit.BaseName.name)
}
inline void BaseName::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ImgTransmit.BaseName.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BaseName::name() const {
  // @@protoc_insertion_point(field_list:ImgTransmit.BaseName.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BaseName::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:ImgTransmit.BaseName.name)
  return &name_;
}

// -------------------------------------------------------------------

// Description

// repeated string desc = 1;
inline int Description::_internal_desc_size() const {
  return desc_.size();
}
inline int Description::desc_size() const {
  return _internal_desc_size();
}
inline void Description::clear_desc() {
  desc_.Clear();
}
inline std::string* Description::add_desc() {
  std::string* _s = _internal_add_desc();
  // @@protoc_insertion_point(field_add_mutable:ImgTransmit.Description.desc)
  return _s;
}
inline const std::string& Description::_internal_desc(int index) const {
  return desc_.Get(index);
}
inline const std::string& Description::desc(int index) const {
  // @@protoc_insertion_point(field_get:ImgTransmit.Description.desc)
  return _internal_desc(index);
}
inline std::string* Description::mutable_desc(int index) {
  // @@protoc_insertion_point(field_mutable:ImgTransmit.Description.desc)
  return desc_.Mutable(index);
}
inline void Description::set_desc(int index, const std::string& value) {
  desc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ImgTransmit.Description.desc)
}
inline void Description::set_desc(int index, std::string&& value) {
  desc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ImgTransmit.Description.desc)
}
inline void Description::set_desc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  desc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ImgTransmit.Description.desc)
}
inline void Description::set_desc(int index, const char* value, size_t size) {
  desc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ImgTransmit.Description.desc)
}
inline std::string* Description::_internal_add_desc() {
  return desc_.Add();
}
inline void Description::add_desc(const std::string& value) {
  desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ImgTransmit.Description.desc)
}
inline void Description::add_desc(std::string&& value) {
  desc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ImgTransmit.Description.desc)
}
inline void Description::add_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  desc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ImgTransmit.Description.desc)
}
inline void Description::add_desc(const char* value, size_t size) {
  desc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ImgTransmit.Description.desc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Description::desc() const {
  // @@protoc_insertion_point(field_list:ImgTransmit.Description.desc)
  return desc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Description::mutable_desc() {
  // @@protoc_insertion_point(field_mutable_list:ImgTransmit.Description.desc)
  return &desc_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ImgTransmit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ImgTransmit::ImgInfo_ImgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ImgTransmit::ImgInfo_ImgType>() {
  return ::ImgTransmit::ImgInfo_ImgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
